// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  password      String
  role          String         @default("USER")
  bio           String?
  country       String?
  credits       Int            @default(0)
  balanceCents  Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  vgirls        VGirl[]
  conversations Conversation[]
  purchases     Purchase[]
  transactions  Transaction[]
  subscriptions Subscription[]
}

model VGirl {
  id           String        @id @default(cuid())
  name         String
  bio          String?
  avatarUrl    String?
  personality  String?
  tags         String[]
  maturity     String        @default("SFW")
  isFeatured   Boolean       @default(false)
  ownerId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  posts         Post[]
  contentPacks  ContentPack[]
  conversations Conversation[]
  subscriptions Subscription[]
}

model Post {
  id          String   @id @default(cuid())
  caption     String?
  mediaUrl    String
  promptUsed  String?
  contentType String?
  visibility  String   @default("PUBLIC")
  isForSale   Boolean  @default(false)
  priceCents  Int?
  maturity    String   @default("SFW")
  vgirlId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  vgirl     VGirl      @relation(fields: [vgirlId], references: [id], onDelete: Cascade)
  purchases Purchase[]
}

model ContentPack {
  id            String   @id @default(cuid())
  title         String
  description   String?
  priceCents    Int
  downloadUrl   String
  coverImageUrl String?
  maturity      String   @default("SFW")
  vgirlId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  vgirl     VGirl      @relation(fields: [vgirlId], references: [id], onDelete: Cascade)
  purchases Purchase[]
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  vgirlId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vgirl    VGirl     @relation(fields: [vgirlId], references: [id], onDelete: Cascade)
  messages Message[]
  
  @@unique([userId, vgirlId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  role           String   // "user" or "assistant"
  sender         String   // "user" or "vgirl"
  conversationId String
  createdAt      DateTime @default(now())
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Purchase {
  id            String       @id @default(cuid())
  userId        String
  priceCents    Int
  createdAt     DateTime     @default(now())
  
  // Polymorphic relations (one of these will be set)
  postId        String?
  contentPackId String?
  
  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  contentPack ContentPack? @relation(fields: [contentPackId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "CREDIT_PURCHASE", "WITHDRAWAL", etc.
  amountCents Int
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String
  vgirlId         String
  tier            String   // "BASIC", "PREMIUM", etc.
  priceCents      Int
  creatorCutCents Int
  appCutCents     Int
  isActive        Boolean  @default(true)
  renewsAt        DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  vgirl VGirl? @relation(fields: [vgirlId], references: [id], onDelete: Cascade)
  
  @@unique([userId, vgirlId])
}
